/*
 * Copyright 2005 Ryan Bloom
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at 
 * 
 * http://www.apache.org/licenses/LICENSE-2.0 
 * 
 * Unless required by applicable law or agreed to in writing, software 
 * distributed under the License is distributed on an "AS IS" BASIS, 
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and 
 * limitations under the License.
 */
package net.rkbloom.logdriver;

import net.rkbloom.logdriver.util.TypeConverter;

import org.apache.log4j.Logger;

import java.io.InputStream;
import java.io.Reader;
import java.math.BigDecimal;
import java.net.URL;
import java.sql.Array;
import java.sql.Blob;
import java.sql.CallableStatement;
import java.sql.Clob;
import java.sql.Connection;
import java.sql.Date;
import java.sql.ParameterMetaData;
import java.sql.Ref;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.SQLWarning;
import java.sql.Time;
import java.sql.Timestamp;
import java.util.Calendar;
import java.util.Map;
import java.util.TreeMap;


/**
 * LogCallableStatement
 * @version $Rev$
 */
public class LogCallableStatement implements CallableStatement {

    private CallableStatement embedded;
    private Connection conn;
    private String sql;
    private Map bindParams;
    private Map outParams;
    private static Logger log = Logger.getLogger(LogCallableStatement.class);
    
    public LogCallableStatement(CallableStatement cs, Connection c, String s) {
        embedded = cs;
        conn = c;
        sql = s;
        // we want to have the bind parameters print out in order
        // otherwise it is difficult to match the parameters with
        // the question marks (?) in the query.
        bindParams = new TreeMap();
        outParams = new TreeMap();
    }
    
    // This looks useless, but it isn't.  I have centralized the logging in
    // this class so that I can easily replace all of the '?'s with the actual
    // values.
    private void logStatement() {
        logStatement(sql);
    }

    private void logStatement(String sql) {
        String replaceBind = System.getProperty("replace.bindParams", "0");
        
        if (replaceBind.equals("1") || replaceBind.equals("true")) {
            String logStr = sql;
            int i = 1;
            while (logStr.indexOf('?') >= 0) {
                logStr = logStr.replaceFirst("\\?", 
                                    bindParams.get(new Integer(i++)).toString());
            }
            log.debug("executing CallableStatement: " + logStr);
            return;
        }
        
        log.debug("executing CallableStatement: '" + sql + "' with bind " +
                  "parameters: " + bindParams + " out parameters: " + outParams);    
    }
    
    /**
     * {@inheritDoc}
     */
    public void addBatch() throws SQLException {
        logStatement();
        embedded.addBatch();
    }

    /**
     * {@inheritDoc}
     */
    public void addBatch(String sql) throws SQLException {
        logStatement(sql);
        embedded.addBatch(sql);
    }

    /**
     * {@inheritDoc}
     */
    public void cancel() throws SQLException {
        embedded.cancel();
    }

    /**
     * {@inheritDoc}
     */
    public void clearBatch() throws SQLException {
        embedded.clearBatch();
    }

    /**
     * {@inheritDoc}
     */
    public void clearParameters() throws SQLException {
        embedded.clearParameters();
        bindParams.clear();
    }

    /**
     * {@inheritDoc}
     */
    public void clearWarnings() throws SQLException {
        embedded.clearWarnings();
    }


    /**
     * {@inheritDoc}
     */
    public void close() throws SQLException {
        embedded.close();
    }


    /**
     * {@inheritDoc}
     */
    public boolean execute() throws SQLException {
        logStatement();
        return embedded.execute();
    }


    /**
     * {@inheritDoc}
     */
    public boolean execute(String sql, int autoGeneratedKeys) throws SQLException {
        logStatement(sql);
        return embedded.execute(sql, autoGeneratedKeys);
    }


    /**
     * {@inheritDoc}
     */
    public boolean execute(String sql, int[] columnIndexes) throws SQLException {
        logStatement(sql);
        return embedded.execute(sql, columnIndexes);
    }

    /**
     * {@inheritDoc}
     */
    public boolean execute(String sql, String[] columnNames) throws SQLException {
        logStatement(sql);
        return embedded.execute(sql, columnNames);
    }

    /**
     * {@inheritDoc}
     */
    public boolean execute(String sql) throws SQLException {
        logStatement(sql);
        return embedded.execute(sql);
    }

    /**
     * {@inheritDoc}
     */
    public int[] executeBatch() throws SQLException {
        logStatement();
        return embedded.executeBatch();
    }

    /**
     * {@inheritDoc}
     */
    public ResultSet executeQuery() throws SQLException {
        logStatement();
        return embedded.executeQuery();
    }

    /**
     * {@inheritDoc}
     */
    public ResultSet executeQuery(String sql) throws SQLException {
        logStatement(sql);
        return embedded.executeQuery(sql);
    }

    /**
     * {@inheritDoc}
     */
    public int executeUpdate() throws SQLException {
        logStatement();
        return embedded.executeUpdate();
    }

    /**
     * {@inheritDoc}
     */
    public int executeUpdate(String sql, int autoGeneratedKeys) throws SQLException {
        logStatement(sql);
        return embedded.executeUpdate(sql, autoGeneratedKeys);
    }

    /**
     * {@inheritDoc}
     */
    public int executeUpdate(String sql, int[] columnIndexes) throws SQLException {
        logStatement(sql);
        return embedded.executeUpdate(sql, columnIndexes);
    }

    /**
     * {@inheritDoc}
     */
    public int executeUpdate(String sql, String[] columnNames) throws SQLException {
        logStatement(sql);
        return embedded.executeUpdate(sql, columnNames);
    }


    /**
     * {@inheritDoc}
     */
    public int executeUpdate(String sql) throws SQLException {
        logStatement(sql);
        return embedded.executeUpdate(sql);
    }


    /**
     * {@inheritDoc}
     */
    public Connection getConnection() throws SQLException {
        return conn;
    }


    /**
     * {@inheritDoc}
     */
    public int getFetchDirection() throws SQLException {
        return embedded.getFetchDirection();
    }


    /**
     * {@inheritDoc}
     */
    public int getFetchSize() throws SQLException {
        return embedded.getFetchSize();
    }


    /**
     * {@inheritDoc}
     */
    public ResultSet getGeneratedKeys() throws SQLException {
        return embedded.getGeneratedKeys();
    }


    /**
     * {@inheritDoc}
     */
    public int getMaxFieldSize() throws SQLException {

        return embedded.getMaxFieldSize();
    }


    /**
     * {@inheritDoc}
     */
    public int getMaxRows() throws SQLException {
        return embedded.getMaxRows();
    }


    /**
     * {@inheritDoc}
     */
    public ResultSetMetaData getMetaData() throws SQLException {
        return embedded.getMetaData();
    }


    /**
     * {@inheritDoc}
     */
    public boolean getMoreResults() throws SQLException {
        return embedded.getMoreResults();
    }


    /**
     * {@inheritDoc}
     */
    public boolean getMoreResults(int current) throws SQLException {
        return embedded.getMoreResults(current);
    }


    /**
     * {@inheritDoc}
     */
    public ParameterMetaData getParameterMetaData() throws SQLException {
        return embedded.getParameterMetaData();
    }


    /**
     * {@inheritDoc}
     */
    public int getQueryTimeout() throws SQLException {
        return embedded.getQueryTimeout();
    }


    /**
     * {@inheritDoc}
     */
    public ResultSet getResultSet() throws SQLException {
        return embedded.getResultSet();
    }


    /**
     * {@inheritDoc}
     */
    public int getResultSetConcurrency() throws SQLException {
        return embedded.getResultSetConcurrency();
    }

    /**
     * {@inheritDoc}
     */
    public int getResultSetHoldability() throws SQLException {
        return embedded.getResultSetHoldability();
    }

    /**
     * {@inheritDoc}
     */
    public int getResultSetType() throws SQLException {
        return embedded.getResultSetType();
    }

    /**
     * {@inheritDoc}
     */
    public int getUpdateCount() throws SQLException {
        return embedded.getUpdateCount();
    }

    /**
     * {@inheritDoc}
     */
    public SQLWarning getWarnings() throws SQLException {
        return embedded.getWarnings();
    }

    /**
     * {@inheritDoc}
     */
    public void setArray(int i, Array x) throws SQLException {
        embedded.setArray(i, x);
        bindParams.put(new Integer(i), x);
    }

    /**
     * {@inheritDoc}
     */
    public void setAsciiStream(int parameterIndex, InputStream x, int length) throws SQLException {
        embedded.setAsciiStream(parameterIndex, x, length);
        bindParams.put(new Integer(parameterIndex), x);
    }

    /**
     * {@inheritDoc}
     */
    public void setBigDecimal(int parameterIndex, BigDecimal x) throws SQLException {
        embedded.setBigDecimal(parameterIndex, x);
        bindParams.put(new Integer(parameterIndex), x);
    }

    /**
     * {@inheritDoc}
     */
    public void setBinaryStream(int parameterIndex, InputStream x, int length) throws SQLException {
        embedded.setBinaryStream(parameterIndex, x, length);
        bindParams.put(new Integer(parameterIndex), x);
    }

    /**
     * {@inheritDoc}
     */
    public void setBlob(int i, Blob x) throws SQLException {
        embedded.setBlob(i, x);
        bindParams.put(new Integer(i), x);
    }

    /**
     * {@inheritDoc}
     */
    public void setBoolean(int parameterIndex, boolean x) throws SQLException {
        embedded.setBoolean(parameterIndex, x);
        bindParams.put(new Integer(parameterIndex), new Boolean(x));
    }

    /**
     * {@inheritDoc}
     */
    public void setByte(int parameterIndex, byte x) throws SQLException {
        embedded.setByte(parameterIndex, x);
        bindParams.put(new Integer(parameterIndex), new Byte(x));
    }

    /**
     * {@inheritDoc}
     */
    public void setBytes(int parameterIndex, byte[] x) throws SQLException {
        embedded.setBytes(parameterIndex, x);
        bindParams.put(new Integer(parameterIndex), x);
    }

    /**
     * {@inheritDoc}
     */
    public void setCharacterStream(int parameterIndex, Reader reader, int length) throws SQLException {
        embedded.setCharacterStream(parameterIndex, reader, length);
        bindParams.put(new Integer(parameterIndex), reader);
    }

    /**
     * {@inheritDoc}
     */
    public void setClob(int i, Clob x) throws SQLException {
        embedded.setClob(i, x);
        bindParams.put(new Integer(i), x);
    }

    /**
     * {@inheritDoc}
     */
    public void setCursorName(String name) throws SQLException {
        embedded.setCursorName(name);
    }

    /**
     * {@inheritDoc}
     */
    public void setDate(int parameterIndex, Date x, Calendar cal) throws SQLException {
        embedded.setDate(parameterIndex, x, cal);
        bindParams.put(new Integer(parameterIndex), x);
    }

    /**
     * {@inheritDoc}
     */
    public void setDate(int parameterIndex, Date x) throws SQLException {
        embedded.setDate(parameterIndex, x);
        bindParams.put(new Integer(parameterIndex), x);
    }

    /**
     * {@inheritDoc}
     */
    public void setDouble(int parameterIndex, double x) throws SQLException {
        embedded.setDouble(parameterIndex, x);
        bindParams.put(new Integer(parameterIndex), new Double(x));
    }

    /**
     * {@inheritDoc}
     */
    public void setEscapeProcessing(boolean enable) throws SQLException {
        embedded.setEscapeProcessing(enable);
    }

    /**
     * {@inheritDoc}
     */
    public void setFetchDirection(int direction) throws SQLException {
        embedded.setFetchDirection(direction);
    }

    /**
     * {@inheritDoc}
     */
    public void setFetchSize(int rows) throws SQLException {
        embedded.setFetchSize(rows);
    }

    /**
     * {@inheritDoc}
     */
    public void setFloat(int parameterIndex, float x) throws SQLException {
        embedded.setFloat(parameterIndex, x);
        bindParams.put(new Integer(parameterIndex), new Float(x));
    }

    /**
     * {@inheritDoc}
     */
    public void setInt(int parameterIndex, int x) throws SQLException {
        embedded.setInt(parameterIndex, x);
        bindParams.put(new Integer(parameterIndex), new Integer(x));
    }

    /**
     * {@inheritDoc}
     */
    public void setLong(int parameterIndex, long x) throws SQLException {
        embedded.setLong(parameterIndex, x);
        bindParams.put(new Integer(parameterIndex), new Long(x));
    }

    /**
     * {@inheritDoc}
     */
    public void setMaxFieldSize(int max) throws SQLException {
        embedded.setMaxFieldSize(max);
    }

    /**
     * {@inheritDoc}
     */
    public void setMaxRows(int max) throws SQLException {
        embedded.setMaxRows(max);
    }

    /**
     * {@inheritDoc}
     */
    public void setNull(int paramIndex, int sqlType, String typeName) throws SQLException {
        embedded.setNull(paramIndex, sqlType, typeName);
    }

    /**
     * {@inheritDoc}
     */
    public void setNull(int parameterIndex, int sqlType) throws SQLException {
        embedded.setNull(parameterIndex, sqlType);
    }

    /**
     * {@inheritDoc}
     */
    public void setObject(int parameterIndex, Object x, int targetSqlType, int scale) throws SQLException {
        embedded.setObject(parameterIndex, x, targetSqlType, scale);
        bindParams.put(new Integer(parameterIndex), x);
    }

    /**
     * {@inheritDoc}
     */
    public void setObject(int parameterIndex, Object x, int targetSqlType) throws SQLException {
        embedded.setObject(parameterIndex, x, targetSqlType);
        bindParams.put(new Integer(parameterIndex), x);
    }

    /**
     * {@inheritDoc}
     */
    public void setObject(int parameterIndex, Object x) throws SQLException {
        embedded.setObject(parameterIndex, x);
        bindParams.put(new Integer(parameterIndex), x);
    }

    /**
     * {@inheritDoc}
     */
    public void setQueryTimeout(int seconds) throws SQLException {
        embedded.setQueryTimeout(seconds);
    }

    /**
     * {@inheritDoc}
     */
    public void setRef(int i, Ref x) throws SQLException {
        embedded.setRef(i, x);
        bindParams.put(new Integer(i), x);
    }

    /**
     * {@inheritDoc}
     */
    public void setShort(int parameterIndex, short x) throws SQLException {
        embedded.setShort(parameterIndex, x);
        bindParams.put(new Integer(parameterIndex), new Short(x));
    }

    /**
     * {@inheritDoc}
     */
    public void setString(int parameterIndex, String x) throws SQLException {
        embedded.setString(parameterIndex, x);
        bindParams.put(new Integer(parameterIndex), x);
    }

    /**
     * {@inheritDoc}
     */
    public void setTime(int parameterIndex, Time x, Calendar cal) throws SQLException {
        embedded.setTime(parameterIndex, x, cal);
        bindParams.put(new Integer(parameterIndex), x);
    }

    /**
     * {@inheritDoc}
     */
    public void setTime(int parameterIndex, Time x) throws SQLException {
        embedded.setTime(parameterIndex, x);
        bindParams.put(new Integer(parameterIndex), x);
    }

    /**
     * {@inheritDoc}
     */
    public void setTimestamp(int parameterIndex, Timestamp x, Calendar cal) throws SQLException {
        embedded.setTimestamp(parameterIndex, x, cal);
        bindParams.put(new Integer(parameterIndex), x);
    }

    /**
     * {@inheritDoc}
     */
    public void setTimestamp(int parameterIndex, Timestamp x) throws SQLException {
        embedded.setTimestamp(parameterIndex, x);
        bindParams.put(new Integer(parameterIndex), x);
    }

    /**
     * {@inheritDoc}
     */
    public void setUnicodeStream(int parameterIndex, InputStream x, int length) throws SQLException {
        embedded.setUnicodeStream(parameterIndex, x, length);
        bindParams.put(new Integer(parameterIndex), x);
    }

    /**
     * {@inheritDoc}
     */
    public void setURL(int parameterIndex, URL x) throws SQLException {
        embedded.setURL(parameterIndex, x);
        bindParams.put(new Integer(parameterIndex), x);
    }

    // Prepared Statement methods
    /**
     * {@inheritDoc}
     */
    public void registerOutParameter(int parameterIndex, int sqlType)
        throws SQLException {
        embedded.registerOutParameter(parameterIndex, sqlType);

        outParams.put(new Integer(parameterIndex),
                new OutParamMetadata(sqlType));
    }

    /**
     * {@inheritDoc}
     */
    public void registerOutParameter(int parameterIndex, int sqlType,
            int scale) throws SQLException {
        embedded.registerOutParameter(parameterIndex, sqlType, scale);
        outParams.put(new Integer(parameterIndex),
                new OutParamMetadata(sqlType, scale));
    }

    /**
     * {@inheritDoc}
     */
    public boolean wasNull() throws SQLException {
        return embedded.wasNull();
    }

    /**
     * {@inheritDoc}
     */
    public String getString(int parameterIndex) throws SQLException {
        return embedded.getString(parameterIndex);
    }

    /**
     * {@inheritDoc}
     */
    public boolean getBoolean(int parameterIndex) throws SQLException {
        return embedded.getBoolean(parameterIndex);
    }

    /**
     * {@inheritDoc}
     */
    public byte getByte(int parameterIndex) throws SQLException {
        return embedded.getByte(parameterIndex);
    }

    /**
     * {@inheritDoc}
     */
    public short getShort(int parameterIndex) throws SQLException {
        return embedded.getShort(parameterIndex);
    }

    /**
     * {@inheritDoc}
     */
    public int getInt(int parameterIndex) throws SQLException {
        return embedded.getInt(parameterIndex);
    }

    /**
     * {@inheritDoc}
     */
    public long getLong(int parameterIndex) throws SQLException {
        return embedded.getLong(parameterIndex);
    }

    /**
     * {@inheritDoc}
     */
    public float getFloat(int parameterIndex) throws SQLException {
        return embedded.getFloat(parameterIndex);
    }

    /**
     * {@inheritDoc}
     */
    public double getDouble(int parameterIndex) throws SQLException {
        return embedded.getDouble(parameterIndex);
    }

    /**
     * {@inheritDoc}
     */
    public BigDecimal getBigDecimal(int parameterIndex, int scale)
        throws SQLException {
        return embedded.getBigDecimal(parameterIndex);
    }

    /**
     * {@inheritDoc}
     */
    public byte[] getBytes(int parameterIndex) throws SQLException {
        return embedded.getBytes(parameterIndex);
    }

    /**
     * {@inheritDoc}
     */
    public Date getDate(int parameterIndex) throws SQLException {
        return embedded.getDate(parameterIndex);
    }

    /**
     * {@inheritDoc}
     */
    public Time getTime(int parameterIndex) throws SQLException {
        return embedded.getTime(parameterIndex);
    }

    /**
     * {@inheritDoc}
     */
    public Timestamp getTimestamp(int parameterIndex) throws SQLException {
        return embedded.getTimestamp(parameterIndex);
    }

    /**
     * {@inheritDoc}
     */
    public Object getObject(int parameterIndex) throws SQLException {
        return embedded.getObject(parameterIndex);
    }

    /**
     * {@inheritDoc}
     */
    public BigDecimal getBigDecimal(int parameterIndex) throws SQLException {
        return embedded.getBigDecimal(parameterIndex);
    }

    /**
     * {@inheritDoc}
     */
    public Object getObject(int i, Map map) throws SQLException {
        return embedded.getObject(i, map);
    }

    /**
     * {@inheritDoc}
     */
    public Ref getRef(int i) throws SQLException {
        return embedded.getRef(i);
    }

    /**
     * {@inheritDoc}
     */
    public Blob getBlob(int i) throws SQLException {
        return embedded.getBlob(i);
    }

    /**
     * {@inheritDoc}
     */
    public Clob getClob(int i) throws SQLException {
        return embedded.getClob(i);
    }

    /**
     * {@inheritDoc}
     */
    public Array getArray(int i) throws SQLException {
        return embedded.getArray(i);
    }

    /**
     * {@inheritDoc}
     */
    public Date getDate(int parameterIndex, Calendar cal)
        throws SQLException {
        return embedded.getDate(parameterIndex, cal);
    }

    /**
     * {@inheritDoc}
     */
    public Time getTime(int parameterIndex, Calendar cal)
        throws SQLException {
        return embedded.getTime(parameterIndex, cal);
    }

    /**
     * {@inheritDoc}
     */
    public Timestamp getTimestamp(int parameterIndex, Calendar cal)
        throws SQLException {
        return embedded.getTimestamp(parameterIndex, cal);
    }

    /**
     * {@inheritDoc}
     */
    public void registerOutParameter(int paramIndex, int sqlType,
            String typeName) throws SQLException {
        embedded.registerOutParameter(paramIndex, sqlType, typeName);
        outParams.put(new Integer(paramIndex),
                new OutParamMetadata(sqlType, typeName));
    }

    /**
     * {@inheritDoc}
     */
    public void registerOutParameter(String parameterName, int sqlType)
        throws SQLException {
        embedded.registerOutParameter(parameterName, sqlType);
        outParams.put(parameterName, new OutParamMetadata(sqlType));
    }

    /**
     * {@inheritDoc}
     */
    public void registerOutParameter(String parameterName, int sqlType,
            int scale) throws SQLException {
        embedded.registerOutParameter(parameterName, sqlType, scale);
        outParams.put(parameterName, new OutParamMetadata(sqlType, scale));
    }

    /**
     * {@inheritDoc}
     */
    public void registerOutParameter(String parameterName, int sqlType,
            String typeName) throws SQLException {
        embedded.registerOutParameter(parameterName, sqlType, typeName);
        outParams.put(parameterName, new OutParamMetadata(sqlType, typeName));
    }

    /**
     * {@inheritDoc}
     */
    public URL getURL(int parameterIndex) throws SQLException {
        return embedded.getURL(parameterIndex);
    }

    /**
     * {@inheritDoc}
     */
    public void setURL(String parameterName, URL val) throws SQLException {
        embedded.setURL(parameterName, val);
        bindParams.put(parameterName, val);
    }

    /**
     * {@inheritDoc}
     */
    public void setNull(String parameterName, int sqlType)
        throws SQLException {
        embedded.setNull(parameterName, sqlType);
        bindParams.put(parameterName, null);
    }

    /**
     * {@inheritDoc}
     */
    public void setBoolean(String parameterName, boolean x)
        throws SQLException {
        embedded.setBoolean(parameterName, x);
        bindParams.put(parameterName, new Boolean(x));
    }

    /**
     * {@inheritDoc}
     */
    public void setByte(String parameterName, byte x) throws SQLException {
        embedded.setByte(parameterName, x);
        bindParams.put(parameterName, new Byte(x));
    }

    /**
     * {@inheritDoc}
     */
    public void setShort(String parameterName, short x) throws SQLException {
        embedded.setShort(parameterName, x);
        bindParams.put(parameterName, new Short(x));
    }

    /**
     * {@inheritDoc}
     */
    public void setInt(String parameterName, int x) throws SQLException {
        embedded.setInt(parameterName, x);
        bindParams.put(parameterName, new Integer(x));
    }

    /**
     * {@inheritDoc}
     */
    public void setLong(String parameterName, long x) throws SQLException {
        embedded.setLong(parameterName, x);
        bindParams.put(parameterName, new Long(x));
    }

    /**
     * {@inheritDoc}
     */
    public void setFloat(String parameterName, float x) throws SQLException {
        embedded.setFloat(parameterName, x);
        bindParams.put(parameterName, new Float(x));
    }

    /**
     * {@inheritDoc}
     */
    public void setDouble(String parameterName, double x)
        throws SQLException {
        embedded.setDouble(parameterName, x);
        bindParams.put(parameterName, new Double(x));
    }

    /**
     * {@inheritDoc}
     */
    public void setBigDecimal(String parameterName, BigDecimal x)
        throws SQLException {
        embedded.setBigDecimal(parameterName, x);
        bindParams.put(parameterName, x);
    }

    /**
     * {@inheritDoc}
     */
    public void setString(String parameterName, String x)
        throws SQLException {
        embedded.setString(parameterName, x);
        bindParams.put(parameterName, x);
    }

    /**
     * {@inheritDoc}
     */
    public void setBytes(String parameterName, byte[] x)
        throws SQLException {
        embedded.setBytes(parameterName, x);
        bindParams.put(parameterName, x);
    }

    /**
     * {@inheritDoc}
     */
    public void setDate(String parameterName, Date x) throws SQLException {
        embedded.setDate(parameterName, x);
        bindParams.put(parameterName, x);
    }

    /**
     * {@inheritDoc}
     */
    public void setTime(String parameterName, Time x) throws SQLException {
        embedded.setTime(parameterName, x);
        bindParams.put(parameterName, x);
    }

    /**
     * {@inheritDoc}
     */
    public void setTimestamp(String parameterName, Timestamp x)
        throws SQLException {
        embedded.setTimestamp(parameterName, x);
        bindParams.put(parameterName, x);
    }

    /**
     * {@inheritDoc}
     */
    public void setAsciiStream(String parameterName, InputStream x,
            int length) throws SQLException {
        embedded.setAsciiStream(parameterName, x, length);
        bindParams.put(parameterName, x);
    }

    /**
     * {@inheritDoc}
     */
    public void setBinaryStream(String parameterName, InputStream x,
            int length) throws SQLException {
        embedded.setBinaryStream(parameterName, x, length);
        bindParams.put(parameterName, x);
    }

    /**
     * {@inheritDoc}
     */
    public void setObject(String parameterName, Object x,
            int targetSqlType, int scale) throws SQLException {
        embedded.setObject(parameterName, x, targetSqlType);
        bindParams.put(parameterName, x);
    }

    /**
     * {@inheritDoc}
     */
    public void setObject(String parameterName, Object x,
            int targetSqlType) throws SQLException {
        embedded.setObject(parameterName, x, targetSqlType);
        bindParams.put(parameterName, x);
    }

    /**
     * {@inheritDoc}
     */
    public void setObject(String parameterName, Object x)
        throws SQLException {
        embedded.setObject(parameterName, x);
        bindParams.put(parameterName, x);
    }

    /**
     * {@inheritDoc}
     */
    public void setCharacterStream(String parameterName, Reader reader,
            int length) throws SQLException {
        embedded.setCharacterStream(parameterName, reader, length);
        bindParams.put(parameterName, reader);
    }

    /**
     * {@inheritDoc}
     */
    public void setDate(String parameterName, Date x, Calendar cal)
        throws SQLException {
        embedded.setDate(parameterName, x, cal);
        bindParams.put(parameterName, x);
    }

    /**
     * {@inheritDoc}
     */
    public void setTime(String parameterName, Time x, Calendar cal)
        throws SQLException {
        embedded.setTime(parameterName, x, cal);
        bindParams.put(parameterName, x);
    }

    /**
     * {@inheritDoc}
     */
    public void setTimestamp(String parameterName, Timestamp x,
            Calendar cal) throws SQLException {
        embedded.setTimestamp(parameterName, x, cal);
        bindParams.put(parameterName, x);
    }

    /**
     * {@inheritDoc}
     */
    public void setNull(String parameterName, int sqlType, String typeName)
        throws SQLException {
        embedded.setNull(parameterName, sqlType, typeName);
        bindParams.put(parameterName, null);
    }

    /**
     * {@inheritDoc}
     */
    public String getString(String parameterName) throws SQLException {
        return embedded.getString(parameterName);        
    }

    /**
     * {@inheritDoc}
     */
    public boolean getBoolean(String parameterName) throws SQLException {
        return embedded.getBoolean(parameterName);
    }

    /**
     * {@inheritDoc}
     */
    public byte getByte(String parameterName) throws SQLException {
        return embedded.getByte(parameterName);
    }

    /**
     * {@inheritDoc}
     */
    public short getShort(String parameterName) throws SQLException {
        return embedded.getShort(parameterName);
    }

    /**
     * {@inheritDoc}
     */
    public int getInt(String parameterName) throws SQLException {
        return embedded.getInt(parameterName);
    }

    /**
     * {@inheritDoc}
     */
    public long getLong(String parameterName) throws SQLException {
        return embedded.getLong(parameterName);
    }

    /**
     * {@inheritDoc}
     */
    public float getFloat(String parameterName) throws SQLException {
        return embedded.getFloat(parameterName);
    }

    /**
     * {@inheritDoc}
     */
    public double getDouble(String parameterName) throws SQLException {
        return embedded.getDouble(parameterName);
    }

    /**
     * {@inheritDoc}
     */
    public byte[] getBytes(String parameterName) throws SQLException {
        return embedded.getBytes(parameterName);
    }

    /**
     * {@inheritDoc}
     */
    public Date getDate(String parameterName) throws SQLException {
        return embedded.getDate(parameterName);
    }

    /**
     * {@inheritDoc}
     */
    public Time getTime(String parameterName) throws SQLException {
        return embedded.getTime(parameterName);
    }

    /**
     * {@inheritDoc}
     */
    public Timestamp getTimestamp(String parameterName) throws SQLException {
        return embedded.getTimestamp(parameterName);
    }

    /**
     * {@inheritDoc}
     */
    public Object getObject(String parameterName) throws SQLException {
        return embedded.getObject(parameterName);
    }

    /**
     * {@inheritDoc}
     */
    public BigDecimal getBigDecimal(String parameterName) throws SQLException {
        return embedded.getBigDecimal(parameterName);
    }

    /**
     * {@inheritDoc}
     */
    public Object getObject(String parameterName, Map map)
        throws SQLException {
        return embedded.getObject(parameterName, map);
    }

    /**
     * {@inheritDoc}
     */
    public Ref getRef(String parameterName) throws SQLException {
        return embedded.getRef(parameterName);
    }

    /**
     * {@inheritDoc}
     */
    public Blob getBlob(String parameterName) throws SQLException {
        return embedded.getBlob(parameterName);
    }

    /**
     * {@inheritDoc}
     */
    public Clob getClob(String parameterName) throws SQLException {
        return embedded.getClob(parameterName);
    }

    /**
     * {@inheritDoc}
     */
    public Array getArray(String parameterName) throws SQLException {
        return embedded.getArray(parameterName);
    }

    /**
     * {@inheritDoc}
     */
    public Date getDate(String parameterName, Calendar cal)
        throws SQLException {
        return embedded.getDate(parameterName, cal);
    }

    /**
     * {@inheritDoc}
     */
    public Time getTime(String parameterName, Calendar cal)
        throws SQLException {
        return embedded.getTime(parameterName, cal);
    }

    /**
     * {@inheritDoc}
     */
    public Timestamp getTimestamp(String parameterName, Calendar cal)
        throws SQLException {
        return embedded.getTimestamp(parameterName, cal);
    }

    /**
     * {@inheritDoc}
     */
    public URL getURL(String parameterName) throws SQLException {
        return embedded.getURL(parameterName);
    }
    
    /**
     * Represents the meta information about a Out parameter.
     * OutParamMetadata
     * @version $Rev$
     */
    class OutParamMetadata {
        private int type;
        private int scale;
        private String typeName;
        public static final int NO_SCALE = -1;
        public static final String NONE = "NONE";
        
        /**
         * Default contructor
         * @param t the SQL type code defined by <code>java.sql.Types</code>.
         * @param s the desired number of digits to the right of the
         * decimal point.  It must be greater than or equal to zero.
         * @param tName the fully-qualified name of an SQL structured type
         */
        public OutParamMetadata(int t, int s, String tName) {
            type = t;
            scale = s;
            typeName = tName;
        }
        
        /**
         * Constructs metadata with a Typename
         * @param t the SQL type code defined by <code>java.sql.Types</code>.
         * @param tName the fully-qualified name of an SQL structured type
         */
        public OutParamMetadata(int t, String tName) {
            this(t, NO_SCALE, tName);
        }

        
        /**
         * Constructs metadata with a Typename
         * @param t the SQL type code defined by <code>java.sql.Types</code>.
         * @param s the desired number of digits to the right of the
         * decimal point.  It must be greater than or equal to zero.
         */
        public OutParamMetadata(int t, int s) {
            this(t, s, NONE);
        }
        /**
         * Constructs metadata with a Typename
         * @param t the SQL type code defined by <code>java.sql.Types</code>.
         */
        public OutParamMetadata(int t) {
            this(t, NO_SCALE, NONE);
        }

        /**
         * @return Returns the scale.
         */
        public int getScale() {
            return scale;
        }
        
        /**
         * @return Returns the type.
         */
        public int getType() {
            return type;
        }
     
        /**
         * @return Returns the typeName.
         */
        public String getTypeName() {
            return typeName;
        }
        
        public String toString() {
            return "type: " + TypeConverter.convert(type) + " scale: " + scale +
                   " type name: " + typeName;
        }
    }
}
